{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";AAAA,uBAAuB;AACvB,SAAS,SAAS,CAAC,IAAY;IAC7B,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,GAAG,CAAC,CAAC;AAClC,CAAC;AACD,SAAS,CAAC,MAAM,CAAC,CAAC;AAUlB,SAAS,eAAe,CAAC,MAAc;IACrC,OAAO,CAAC,GAAG,CAAC,QAAQ,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;IACnC,OAAO,CAAC,GAAG,CAAC,YAAY,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;IACtC,OAAO,CAAC,GAAG,CAAC,UAAU,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;AACvC,CAAC;AAED,MAAM,aAAa,GAAW;IAC5B,IAAI,EAAE,MAAM;IACZ,GAAG,EAAE,EAAE;IACP,IAAI,EAAE,QAAQ;CACf,CAAC;AAEF,eAAe,CAAC,aAAa,CAAC,CAAC;AAG/B,8CAA8C;AAC9C,SAAS,YAAY,CAAC,GAAW;IAC/B,OAAO,GAAG,GAAG,GAAG,CAAC;AACnB,CAAC;AACD,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;AAG9B,gCAAgC;AAChC,SAAS,MAAM,CAAC,GAAW;IACzB,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC;AACvB,CAAC;AACD,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;AACxC,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;AASxC,SAAS,gBAAgB,CAAC,OAAgB;IACxC,OAAO,CAAC,GAAG,CAAC,YAAY,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;IACxC,OAAO,CAAC,GAAG,CAAC,WAAW,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;AAC1C,CAAC;AAED,MAAM,cAAc,GAAY;IAC9B,IAAI,EAAE,MAAM;IACZ,KAAK,EAAE,GAAG;CACX,CAAC;AAEF,gBAAgB,CAAC,cAAc,CAAC,CAAC;AAGjC,2BAA2B;AAC3B,SAAS,UAAU,CAAC,OAAe;IACjC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AACvB,CAAC;AAED,UAAU,CAAC,OAAO,CAAC,CAAC","sourcesContent":["//1 Функция приветствия\r\nfunction greetUser(name: string): void {\r\n  console.log(`Привет, ${name}!`);\r\n}\r\ngreetUser('Oleg');\r\n\r\n\r\n//2. Типизация функции с объектом в качестве параметра\r\ninterface Person {\r\n  name: string;\r\n  age: number;\r\n  city: string;\r\n}\r\n\r\nfunction printPersonInfo(person: Person): void {\r\n  console.log(`Имя: ${person.name}`);\r\n  console.log(`Возраст: ${person.age}`);\r\n  console.log(`Город: ${person.city}`);\r\n}\r\n\r\nconst newPersonInfo: Person = {\r\n  name: 'Oleg',\r\n  age: 25,\r\n  city: 'Berlin',\r\n};\r\n\r\nprintPersonInfo(newPersonInfo);\r\n\r\n\r\n//3. Простая типизация для числового параметра\r\nfunction squareNumber(num: number): number {\r\n  return num * num;\r\n}\r\nconsole.log(squareNumber(10));\r\n\r\n\r\n// 4.Типизация функции с boolean\r\nfunction isEven(num: number): boolean {\r\n  return num % 2 === 0;\r\n}\r\nconsole.log('589 четное?', isEven(589));\r\nconsole.log('258 четное?', isEven(258));\r\n\r\n\r\n// 5. Создание интерфейса для объекта\r\ninterface Student {\r\n  name: string;\r\n  grade: number;\r\n}\r\n\r\nfunction printStudentInfo(student: Student): void {\r\n  console.log(`Студент: ${student.name}`);\r\n  console.log(`Оценка: ${student.grade}`);\r\n}\r\n\r\nconst newStudentInfo: Student = {\r\n  name: 'Oleg',\r\n  grade: 1.0,\r\n};\r\n\r\nprintStudentInfo(newStudentInfo);\r\n\r\n\r\n//6. Функция с типом 'void'\r\nfunction logMessage(message: string): void {\r\n  console.log(message);\r\n}\r\n\r\nlogMessage('Hello');\r\n"]}