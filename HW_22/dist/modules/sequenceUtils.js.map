{"version":3,"file":"sequenceUtils.js","sourceRoot":"","sources":["../../src/modules/sequenceUtils.ts"],"names":[],"mappings":"AAAA;;;4EAG4E;AAE5E,MAAM,UAAU,iBAAiB,CAAC,KAAa;IAC7C,MAAM,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACtB,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,KAAK,EAAE,CAAC;QACtE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;IACrE,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,UAAU,oBAAoB,CAAC,KAAa;IAChD,MAAM,MAAM,GAAa,EAAE,CAAC;IAC5B,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC;QACtC,IAAI,OAAO,GAAG,IAAI,CAAC;QACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YACzC,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;gBAClB,OAAO,GAAG,KAAK,CAAC;gBAChB,MAAM;YACR,CAAC;QACH,CAAC;QACD,IAAI,OAAO;YAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAChC,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,oCAAoC;AACpC,oEAAoE;AACpE,iCAAiC;AACjC,uCAAuC;AACvC,0DAA0D;AAC1D,MAAM;AACN,mBAAmB;AACnB,IAAI","sourcesContent":["/* 4.Создайте файл `sequenceUtils.ts`, в котором определите функции:\r\n`generateFibonacci`, которая генерирует последовательность Фибоначчи до указанного числа.\r\n`generatePrimeNumbers`, которая генерирует простые числа до указанного числа.\r\nВ файле `main.ts` импортируйте эти функции и протестируйте их на примерах.*/\r\n\r\nexport function generateFibonacci(limit: number): number[] {\r\n  const result = [0, 1];\r\n  while (result[result.length - 1] + result[result.length - 2] <= limit) {\r\n    result.push(result[result.length - 1] + result[result.length - 2]);\r\n  }\r\n  return result;\r\n}\r\n\r\nexport function generatePrimeNumbers(limit: number): number[] {\r\n  const primes: number[] = [];\r\n  for (let num = 2; num <= limit; num++) {\r\n    let isPrime = true;\r\n    for (let i = 2; i <= Math.sqrt(num); i++) {\r\n      if (num % i === 0) {\r\n        isPrime = false;\r\n        break;\r\n      }\r\n    }\r\n    if (isPrime) primes.push(num);\r\n  }\r\n  return primes;\r\n}\r\n\r\n//Вариант 2 для generatePrimeNumbers\r\n//   export function generatePrimeNumbers(limit: number): number[] {\r\n//   const primes: number[] = [];\r\n//   for (let i = 2; i <= limit; i++) {\r\n//     if (primes.every(p => i % p !== 0)) primes.push(i);\r\n//   }\r\n//   return primes;\r\n// }\r\n"]}