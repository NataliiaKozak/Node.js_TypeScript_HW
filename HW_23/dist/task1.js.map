{"version":3,"file":"task1.js","sourceRoot":"","sources":["../src/task1.ts"],"names":[],"mappings":";AAAA;;;8DAG8D;AAE9D,MAAM,IAAI,GAAG,CAAC,IAAY,EAAE,EAAU,EAAmB,EAAE,CACzD,IAAI,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CACvB,UAAU,CAAC,GAAG,EAAE;IACd,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,CAAC;QACxB,GAAG,CAAC,YAAY,IAAI,EAAE,CAAC,CAAC;IAC1B,CAAC;SAAM,CAAC;QACN,GAAG,CAAC,GAAG,IAAI,UAAU,EAAE,KAAK,CAAC,CAAC;IAChC,CAAC;AACH,CAAC,EAAE,EAAE,CAAC,CACP,CAAC;AAEJ,KAAK,UAAU,aAAa;IAC1B,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;IAChC,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC1C,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAErB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC1C,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAErB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC1C,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAErB,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;IAChC,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;IACxC,CAAC;AACH,CAAC;AAED,aAAa,EAAE,CAAC;AAEhB,WAAW;AACX,sCAAsC;AACtC,sCAAsC;AACtC,gDAAgD;AAChD,QAAQ;AACR,IAAI;AAEJ,sCAAsC;AACtC,sCAAsC;AACtC,gDAAgD;AAChD,QAAQ;AACR,IAAI;AAEJ,sCAAsC;AACtC,sCAAsC;AACtC,gDAAgD;AAChD,QAAQ;AACR,IAAI;AAEJ,6CAA6C;AAC7C,mCAAmC;AACnC,0BAA0B;AAE1B,mCAAmC;AACnC,0BAA0B;AAE1B,mCAAmC;AACnC,0BAA0B;AAE1B,mCAAmC;AACnC,IAAI;AAEJ,cAAc","sourcesContent":["/*Задание 1. Обработка цепочки промисов с `async/await`\r\nСоздайте несколько функций, которые возвращают промисы с разным временем выполнения.\r\nНапишите функцию, которая вызывает эти промисы поочерёдно, используя `await`, и обрабатывает результаты каждой операции.\r\nУбедитесь, что цепочка промисов выполняется последовательно.*/\r\n\r\nconst task = (name: string, ms: number): Promise<string> =>\r\n  new Promise((res, rej) =>\r\n    setTimeout(() => {\r\n      if (Math.random() > 0.8) {\r\n        rej(`Error in ${name}`);\r\n      } else {\r\n        res(`${name} done (${ms}ms)`);\r\n      }\r\n    }, ms)\r\n  );\r\n\r\nasync function runSequential(): Promise<void> {\r\n  console.log('start sequential');\r\n  try {\r\n    const result1 = await task('task1', 3000);\r\n    console.log(result1);\r\n\r\n    const result2 = await task('task2', 2000);\r\n    console.log(result2);\r\n\r\n    const result3 = await task('task3', 1000);\r\n    console.log(result3);\r\n\r\n    console.log('All tasks done');\r\n  } catch (error) {\r\n    console.error('Caught error:', error);\r\n  }\r\n}\r\n\r\nrunSequential();\r\n\r\n//Вариант 2\r\n// function task1(): Promise<string> {\r\n//   return new Promise((resolve) => {\r\n//     setTimeout(() => resolve('task1'), 1000);\r\n//   });\r\n// }\r\n\r\n// function task2(): Promise<string> {\r\n//   return new Promise((resolve) => {\r\n//     setTimeout(() => resolve('task2'), 2000);\r\n//   });\r\n// }\r\n\r\n// function task3(): Promise<string> {\r\n//   return new Promise((resolve) => {\r\n//     setTimeout(() => resolve('task3'), 3000);\r\n//   });\r\n// }\r\n\r\n// async function runTasks(): Promise<void> {\r\n//   const result1 = await task1();\r\n//   console.log(result1);\r\n\r\n//   const result2 = await task2();\r\n//   console.log(result2);\r\n\r\n//   const result3 = await task3();\r\n//   console.log(result3);\r\n\r\n//   console.log('All tasks done');\r\n// }\r\n\r\n// runTasks();\r\n"]}