{"version":3,"file":"task2.js","sourceRoot":"","sources":["../src/task2.ts"],"names":[],"mappings":";AAAA;;;+FAG+F;AAE/F,+BAA+B;AAC/B,MAAM,YAAY,GAAG,CAAC,GAAW,EAAE,EAAE,GAAG,GAAG,EAAmB,EAAE,CAC9D,IAAI,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAErE,qBAAqB;AACrB,KAAK,UAAU,oBAAoB,CAAC,GAAa;IAC/C,MAAM,QAAQ,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,yCAAyC;IAChH,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,0CAA0C;IACvF,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,qCAAqC;AACzE,CAAC;AAED,oBAAoB,CAAC,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;AAGpD,iCAAiC;AACjC,uEAAuE;AACvE,UAAU;AACV,6EAA6E;AAC7E,mDAAmD;AACnD,wCAAwC;AACxC,sBAAsB;AACtB,4DAA4D;AAC5D,MAAM;AACN,IAAI","sourcesContent":["/*Задание 2. Асинхронная обработка данных из массива\r\nНапишите функцию, которая принимает массив строк.\r\nКаждая строка будет асинхронно обрабатываться (например, преобразовываться в верхний регистр с задержкой).\r\nИспользуйте `Promise.all` для выполнения всех операций параллельно и вывода всех результатов.*/\r\n\r\n// Функция для отдельной строки\r\nconst toUpperAsync = (str: string, ms = 100): Promise<string> =>\r\n  new Promise((res) => setTimeout(() => res(str.toUpperCase()), ms));\r\n\r\n//Функция для массива\r\nasync function processArrayParallel(arr: string[]): Promise<void> {\r\n  const promises = arr.map((str, i) => toUpperAsync(str, 100 + i * 50)); //100 + i * 50 — задержка в миллисекундах\r\n  const results = await Promise.all(promises); //промисы идут одновременно, не по очереди\r\n  console.log('results:', results); // сохраняет порядок входного массива\r\n}\r\n\r\nprocessArrayParallel(['apple', 'banana', 'cherry']);\r\n\r\n\r\n//с try/catch, но ошибки не будет\r\n// async function processArrayParallel2(arr: string[]): Promise<void> {\r\n//   try {\r\n//     const promises = arr.map((str, i) => toUpperAsync(str, 100 + i * 50));\r\n//     const results = await Promise.all(promises);\r\n//     console.log('results:', results);\r\n//   } catch (error) {\r\n//     console.error('Ошибка при обработке массива', error);\r\n//   }\r\n// }\r\n\r\n"]}