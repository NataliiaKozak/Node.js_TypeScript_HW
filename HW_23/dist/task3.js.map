{"version":3,"file":"task3.js","sourceRoot":"","sources":["../src/task3.ts"],"names":[],"mappings":";AAAA;;;2FAG2F;AAE3F,MAAM,YAAY,GAAG,IAAI,OAAO,CAAS,CAAC,GAAG,EAAE,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;AACtF,MAAM,aAAa,GAAG,IAAI,OAAO,CAAS,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CACnD,UAAU,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC,EAAE,IAAI,CAAC,CAC9D,CAAC;AACF,MAAM,YAAY,GAAG,IAAI,OAAO,CAAS,CAAC,GAAG,EAAE,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;AAEtF,KAAK,UAAU,iBAAiB;IAC9B,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,aAAa,EAAE,YAAY,CAAC,CAAC,CAAC;QAC/E,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IACnC,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,OAAO,CAAC,GAAG,CAAC,kCAAkC,EAAG,GAAa,CAAC,OAAO,CAAC,CAAC;IAC1E,CAAC;AACH,CAAC;AAED,iBAAiB,EAAE,CAAC;AAEpB,YAAY;AACZ,SAAS,aAAa;IACpB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAC7B,UAAU,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,oBAAoB,CAAC,EAAE,IAAI,CAAC,CACtD,CAAC;AACJ,CAAC;AAED,SAAS,cAAc;IACrB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAC7B,UAAU,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,qBAAqB,CAAC,EAAE,IAAI,CAAC,CACvD,CAAC;AACJ,CAAC;AAED,SAAS,aAAa;IACpB,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,CAC/B,UAAU,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,uBAAuB,CAAC,EAAE,IAAI,CAAC,CACxD,CAAC;AACJ,CAAC;AAED,KAAK,UAAU,oBAAoB;IACjC,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YAChC,aAAa,EAAE;YACf,cAAc,EAAE;YAChB,aAAa,EAAE;SAChB,CAAC,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;IACvC,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;IAC1C,CAAC;AACH,CAAC;AAED,oBAAoB,EAAE,CAAC","sourcesContent":["/*Задание 3. Обработка ошибки в параллельных промисах\r\nНапишите функцию, которая вызывает три промиса параллельно с помощью `Promise.all`.\r\nОдин из промисов должен намеренно завершиться с ошибкой через `reject`. \r\nОбработайте эту ошибку с использованием `try/catch` и выведите соответствующее сообщение.*/\r\n\r\nconst firstPromise = new Promise<string>((res) => setTimeout(() => res('ok1'), 1000));\r\nconst secondPromise = new Promise<string>((_, rej) =>\r\n  setTimeout(() => rej(new Error('Fail second promise')), 2000)\r\n);\r\nconst thirdPromise = new Promise<string>((res) => setTimeout(() => res('ok3'), 3000));\r\n\r\nasync function parallelWithError(): Promise<void> {\r\n  try {\r\n    const results = await Promise.all([firstPromise, secondPromise, thirdPromise]);\r\n    console.log('results:', results);\r\n  } catch (err) {\r\n    console.log('Caught error from Promise.all ->', (err as Error).message);\r\n  }\r\n}\r\n\r\nparallelWithError();\r\n\r\n// 2 Вариант\r\nfunction firstPromise1(): Promise<string> {\r\n  return new Promise((resolve) =>\r\n    setTimeout(() => resolve('First promise done'), 1000)\r\n  );\r\n}\r\n\r\nfunction secondPromise1(): Promise<string> {\r\n  return new Promise((resolve) =>\r\n    setTimeout(() => resolve('Second promise done'), 2000)\r\n  );\r\n}\r\n\r\nfunction thirdPromise1(): Promise<string> {\r\n  return new Promise((_, reject) =>\r\n    setTimeout(() => reject('Third promise failed!'), 3000)\r\n  );\r\n}\r\n\r\nasync function allPromisesWithError(): Promise<void> {\r\n  try {\r\n    const results = await Promise.all([\r\n      firstPromise1(),\r\n      secondPromise1(),\r\n      thirdPromise1(),\r\n    ]);\r\n    console.log('All results:', results);\r\n  } catch (error) {\r\n    console.error('Error occurred:', error);\r\n  }\r\n}\r\n\r\nallPromisesWithError();\r\n"]}