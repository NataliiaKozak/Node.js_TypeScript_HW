{"version":3,"file":"task4.js","sourceRoot":"","sources":["../src/task4.ts"],"names":[],"mappings":";AAAA;;;iGAGiG;AAEjG,MAAM,UAAU,GAAG,CAAC,EAAU,EAAmB,EAAE,CACjD,IAAI,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAErE,KAAK,UAAU,SAAS,CAAC,OAAiB;IACxC,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IACnD,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC5C,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;AAC7C,CAAC;AAED,SAAS,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;AAE1B,wDAAwD;AACxD,MAAM,WAAW,GAAG,CAAC,EAAU,EAAmB,EAAE,CAClD,IAAI,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;IAClB,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IACzB,UAAU,CAAC,GAAG,EAAE;QACd,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,GAAG,CAAC,UAAU,EAAE,cAAc,GAAG,GAAG,KAAK,MAAM,CAAC,CAAC;IACnD,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC,CAAC,CAAC;AAEL,KAAK,UAAU,UAAU,CAAC,OAAiB;IACzC,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;IACpD,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC5C,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;AAC7C,CAAC;AAED,UAAU,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC","sourcesContent":["/*Задание 4. Асинхронная функция с динамическим временем выполнения\r\nНапишите асинхронную функцию, которая принимает массив чисел.\r\nДля каждого числа создайте промис, который будет завершаться через количество миллисекунд, равное значению числа.\r\nИспользуйте `Promise.all` для ожидания завершения всех промисов и вывода результатов в консоль.*/\r\n\r\nconst delayValue = (ms: number): Promise<string> =>\r\n  new Promise((res) => setTimeout(() => res(`Waited ${ms} ms`), ms));\r\n\r\nasync function runDelays(numbers: number[]): Promise<void> {\r\n  const promises = numbers.map((n) => delayValue(n));\r\n  const results = await Promise.all(promises);\r\n  console.log('All done, results:', results);\r\n}\r\n\r\nrunDelays([100, 300, 50]);\r\n\r\n//измерение реального времени выполнения каждого промиса\r\nconst delayValue1 = (ms: number): Promise<string> =>\r\n  new Promise((res) => {\r\n    const start = Date.now();\r\n    setTimeout(() => {\r\n      const end = Date.now();\r\n      res(`Waited ${ms} ms (real: ${end - start} ms)`);\r\n    }, ms);\r\n  });\r\n\r\nasync function runDelays1(numbers: number[]): Promise<void> {\r\n  const promises = numbers.map((n) => delayValue1(n));\r\n  const results = await Promise.all(promises);\r\n  console.log('All done, results:', results);\r\n}\r\n\r\nrunDelays1([100, 300, 50]);"]}